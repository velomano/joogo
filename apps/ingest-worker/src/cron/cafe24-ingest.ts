import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú
config();

const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

// Ïã§Ï†ú Í∏∞ÏÉÅÏ≤≠ API Ìò∏Ï∂ú Ìï®Ïàò (ÏµúÏ†ÅÌôîÎêú Î≤ÑÏ†Ñ)
async function fetchWeatherData(date: string) {
  // Î°úÍ∑∏ Ï∂úÎ†• ÏµúÏÜåÌôî
  const today = new Date();
  const targetDate = new Date(date);
  const daysDiff = Math.ceil((today.getTime() - targetDate.getTime()) / (1000 * 60 * 60 * 24));
  
  // ÏµúÍ∑º 3Ïùº Ïù¥ÎÇ¥Í∞Ä ÏïÑÎãàÎ©¥ Mock Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
  if (daysDiff > 3) {
    return generateMockWeatherData(date);
  }
  
  console.log(`üå§Ô∏è  Í∏∞ÏÉÅÏ≤≠ API Ìò∏Ï∂ú: ${date}`);
  
  try {
    // Í∏∞ÏÉÅÏ≤≠ Îã®Í∏∞ÏòàÎ≥¥ API Ìò∏Ï∂ú
    const baseDate = date.replace(/-/g, '');
    const baseTime = '0500'; // 5Ïãú Í∏∞Ï§Ä
    const nx = '55'; // ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨ Ï¢åÌëú
    const ny = '127';
    
    const apiKey = process.env.KMA_SERVICE_KEY;
    if (!apiKey) {
      throw new Error('KMA_SERVICE_KEY ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§');
    }
    
    const url = `https://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst?serviceKey=${apiKey}&numOfRows=1000&pageNo=1&base_date=${baseDate}&base_time=${baseTime}&nx=${nx}&ny=${ny}&dataType=JSON`;
    
    console.log(`API URL: ${url.substring(0, 100)}...`);
    
    const response = await fetch(url);
    
    if (!response.ok) {
      throw new Error(`Í∏∞ÏÉÅÏ≤≠ API Ïò§Î•ò: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (data.response?.header?.resultCode !== '00') {
      throw new Error(`Í∏∞ÏÉÅÏ≤≠ API ÏùëÎãµ Ïò§Î•ò: ${data.response?.header?.resultMsg}`);
    }
    
    // Í∏∞ÏÉÅÏ≤≠ Îç∞Ïù¥ÌÑ∞ ÌååÏã±
    const items = data.response?.body?.items?.item || [];
    let tavg = 20.0; // Í∏∞Î≥∏Í∞í
    let humidity = 60; // Í∏∞Î≥∏Í∞í
    let precipitation = 0; // Í∏∞Î≥∏Í∞í
    
    // TMP (Í∏∞Ïò®), REH (ÏäµÎèÑ), PCP (Í∞ïÏàòÎüâ) Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
    for (const item of items) {
      if (item.category === 'TMP' && item.fcstTime === '0600') {
        tavg = parseFloat(item.fcstValue) || tavg;
      }
      if (item.category === 'REH' && item.fcstTime === '0600') {
        humidity = parseInt(item.fcstValue) || humidity;
      }
      if (item.category === 'PCP' && item.fcstTime === '0600') {
        precipitation = parseFloat(item.fcstValue) || precipitation;
      }
    }
    
    console.log(`‚úÖ Í∏∞ÏÉÅÏ≤≠ Îç∞Ïù¥ÌÑ∞ ÏàòÏã†: Í∏∞Ïò® ${tavg}¬∞C, ÏäµÎèÑ ${humidity}%, Í∞ïÏàòÎüâ ${precipitation}mm`);
    
    return {
      date,
      region: 'SEOUL',
      temperature: tavg,
      humidity,
      precipitation,
      description: precipitation > 0 ? 'ÎπÑ' : 'ÎßëÏùå'
    };
    
  } catch (error) {
    console.error('‚ùå Í∏∞ÏÉÅÏ≤≠ API Ìò∏Ï∂ú Ïã§Ìå®:', error);
    
    // Fallback: Mock Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    console.log('üîÑ Fallback Mock Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±');
    const dayOfYear = Math.floor((new Date(date).getTime() - new Date(new Date(date).getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));
    const baseTemp = 15;
    const tempSeasonal = 10 * Math.sin((dayOfYear - 80) * 2 * Math.PI / 365);
    const daily = 5 * Math.sin(dayOfYear * 0.1);
    const randomTemp = (Math.random() - 0.5) * 8;
    const tavg = +(baseTemp + tempSeasonal + daily + randomTemp).toFixed(1);
    
    return {
      date,
      region: 'SEOUL',
      temperature: tavg,
      humidity: Math.round(50 + Math.random() * 30),
      precipitation: Math.round(Math.random() * 5),
      description: 'ÎßëÏùå (Fallback)'
    };
  }
}

// Mock Í∏∞ÏÉÅ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ìï®Ïàò
function generateMockWeatherData(date: string) {
  const d = new Date(date);
  const dayOfYear = Math.floor((d.getTime() - new Date(d.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));
  
  // Í≥ÑÏ†àÎ≥Ñ Ïò®ÎèÑ Î∂ÑÌè¨
  const baseTemp = 15;
  const seasonal = 12 * Math.sin((dayOfYear - 80) * 2 * Math.PI / 365);
  const daily = 6 * Math.sin(dayOfYear * 0.1);
  const random = (Math.random() - 0.5) * 6;
  const tavg = Math.round((baseTemp + seasonal + daily + random) * 10) / 10;
  
  // ÏäµÎèÑ Í≥ÑÏÇ∞
  const humidity = Math.round(80 - (tavg - 10) * 2 + (Math.random() - 0.5) * 20);
  const clampedHumidity = Math.max(30, Math.min(95, humidity));
  
  // Í∞ïÏàòÎüâ (Í≥ÑÏ†àÎ≥Ñ)
  const isRainySeason = dayOfYear >= 150 && dayOfYear <= 200; // 6-7Ïõî
  const precipitation = isRainySeason ? Math.random() * 20 : Math.random() * 5;
  
  return {
    date,
    region: 'SEOUL',
    temperature: tavg,
    humidity: clampedHumidity,
    precipitation: Math.round(precipitation * 10) / 10,
    description: tavg > 25 ? 'ÎßëÏùå' : tavg > 15 ? 'Íµ¨Î¶ÑÎßéÏùå' : 'ÌùêÎ¶º',
    source: 'mock'
  };
}

// Ïã§Ï†ú Í¥ëÍ≥† API Ìò∏Ï∂ú Ìï®Ïàò (Mock-ads ÏÑúÎ≤Ñ ÏÇ¨Ïö©)
async function fetchAdsData(date: string) {
  console.log(`üìä Í¥ëÍ≥† API Ìò∏Ï∂ú: ${date}`);
  
  try {
    // Mock-ads ÏÑúÎ≤Ñ Ìò∏Ï∂ú
    const mockAdsUrl = process.env.MOCK_ADS_URL || 'http://localhost:8787';
    const url = `${mockAdsUrl}/api/ads?date=${date}`;
    
    console.log(`Í¥ëÍ≥† API URL: ${url}`);
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    if (!response.ok) {
      throw new Error(`Í¥ëÍ≥† API Ïò§Î•ò: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (!data.points || data.points.length === 0) {
      throw new Error('Í¥ëÍ≥† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§');
    }
    
    // Ï≤´ Î≤àÏß∏ Í¥ëÍ≥† Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
    const adData = data.points[0];
    
    console.log(`‚úÖ Í¥ëÍ≥† Îç∞Ïù¥ÌÑ∞ ÏàòÏã†: ${adData.channel} - ${adData.campaign}`);
    
    return {
      date,
      channel: adData.channel,
      campaign_id: adData.campaign,
      impressions: adData.impressions,
      clicks: adData.clicks,
      spend: adData.cost,
      revenue: adData.revenue,
      roas: adData.roas,
      ctr: adData.ctr,
      cpc: adData.cpc
    };
    
  } catch (error) {
    console.error('‚ùå Í¥ëÍ≥† API Ìò∏Ï∂ú Ïã§Ìå®:', error);
    
    // Fallback: Mock Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    console.log('üîÑ Fallback Mock Í¥ëÍ≥† Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±');
    const channels = ['google', 'facebook', 'naver', 'kakao'];
    const campaigns = ['AlwaysOn', 'PromoPush', 'Seasonal', 'Brand'];
    const channel = channels[Math.floor(Math.random() * channels.length)];
    const campaign = campaigns[Math.floor(Math.random() * campaigns.length)];
    
    const impressions = Math.round(1000 + Math.random() * 5000);
    const clicks = Math.round(impressions * (0.01 + Math.random() * 0.03));
    const spend = Math.round(100000 + Math.random() * 500000);
    const revenue = Math.round(spend * (1.5 + Math.random() * 1.0));
    const roas = +(revenue / spend).toFixed(2);
    
    return {
      date,
      channel,
      campaign_id: `CAMP-${date}-${campaign}`,
      impressions,
      clicks,
      spend,
      revenue,
      roas,
      ctr: +(clicks / impressions * 100).toFixed(2),
      cpc: +(spend / clicks).toFixed(2)
    };
  }
}

// Ïã§Ï†ú Îß§Ï∂ú API Ìò∏Ï∂ú Ìï®Ïàò (Mock-cafe24 ÏÑúÎ≤Ñ ÏÇ¨Ïö©)
async function fetchSalesData(date: string) {
  console.log(`üí∞ Îß§Ï∂ú API Ìò∏Ï∂ú: ${date}`);
  
  try {
    // Mock-cafe24 ÏÑúÎ≤Ñ Ìò∏Ï∂ú
    const mockCafe24Url = process.env.MOCK_CAFE24_URL || 'http://localhost:3000';
    const url = `${mockCafe24Url}/api/mock/cafe24?from=${date}&to=${date}&kind=calendar`;
    
    console.log(`Îß§Ï∂ú API URL: ${url}`);
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    if (!response.ok) {
      throw new Error(`Îß§Ï∂ú API Ïò§Î•ò: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (!data || data.length === 0) {
      throw new Error('Îß§Ï∂ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§');
    }
    
    // Îß§Ï∂ú Îç∞Ïù¥ÌÑ∞Î•º sales_data ÌÖåÏù¥Î∏î ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
    const salesData = data.map((item: any) => ({
      date: item.date,
      region: 'SEOUL', // Í∏∞Î≥∏Í∞í
      channel: 'web', // Í∏∞Î≥∏Í∞í
      category: 'TOPS', // Í∏∞Î≥∏Í∞í
      sku: `SKU-${item.date}`,
      revenue: item.revenue || 0,
      quantity: Math.round((item.revenue || 0) / 50000), // Ï∂îÏ†ï ÏàòÎüâ
      roas: item.roas || 2.0,
      spend: Math.round((item.revenue || 0) / (item.roas || 2.0)),
      is_event: item.is_event || false
    }));
    
    console.log(`‚úÖ Îß§Ï∂ú Îç∞Ïù¥ÌÑ∞ ÏàòÏã†: ${salesData.length}Í∞ú`);
    
    return salesData;
    
  } catch (error) {
    console.error('‚ùå Îß§Ï∂ú API Ìò∏Ï∂ú Ïã§Ìå®:', error);
    
    // Fallback: Mock Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    console.log('üîÑ Fallback Mock Îß§Ï∂ú Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±');
    const rng = (seed: number) => {
      let s = seed;
      return () => (s = (s * 1664525 + 1013904223) % 4294967296) / 4294967296;
    };
    
    const random = rng(parseInt(date.replace(/-/g, '')));
    const regions = ['SEOUL', 'BUSAN', 'DAEGU', 'INCHEON', 'GWANGJU', 'DAEJEON', 'ULSAN', 'GYEONGGI'];
    const channels = ['web', 'app', 'mobile', 'kiosk'];
    const categories = ['TOPS', 'BOTTOMS', 'OUTER', 'ACC', 'SHOES', 'BAGS'];
    
    const salesData: { date: string; region: string; channel: string; category: string; sku: string; revenue: number; quantity: number; roas: number; spend: number; is_event: boolean }[] = [];
    
    // Îß§Ï∂ú Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    for (const region of regions) {
      for (const channel of channels) {
        for (const category of categories) {
          const seasonal = 1 + (new Date(date).getMonth() === 5 || new Date(date).getMonth() === 10 ? 0.4 : 0);
          const event = new Date(date).getDate() === 1 || new Date(date).getDate() === 15 ? 1 : 0;
          const revenue = Math.round(500000 + 4500000 * seasonal * (0.7 + random()));
          const quantity = Math.round(revenue / 50000);
          const roas = +(2.0 + (random() - 0.5) * 0.6).toFixed(2);
          const spend = Math.round(revenue / roas);
          
          salesData.push({
            date,
            region,
            channel,
            category,
            sku: `${category}-${String(Math.floor(random() * 100)).padStart(3, '0')}`,
            revenue,
            quantity,
            roas,
            spend,
            is_event: !!event
          });
        }
      }
    }
    
    return salesData;
  }
}

async function fetchCafe24Data(date: string) {
  // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Cafe24 API Ìò∏Ï∂ú
  // const response = await fetch(`https://api.cafe24.com/sales?date=${date}`, {
  //   headers: { 'Authorization': `Bearer ${process.env.CAFE24_API_KEY}` }
  // });
  
  // ÌòÑÏû¨Îäî Mock Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
  const rng = (seed: number) => {
    let s = seed;
    return () => (s = (s * 1664525 + 1013904223) % 4294967296) / 4294967296;
  };
  
  const random = rng(parseInt(date.replace(/-/g, '')));
  const regions = ['SEOUL', 'BUSAN', 'DAEGU', 'INCHEON', 'GWANGJU', 'DAEJEON', 'ULSAN', 'GYEONGGI'];
  const channels = ['web', 'app', 'mobile', 'kiosk'];
  const categories = ['TOPS', 'BOTTOMS', 'OUTER', 'ACC', 'SHOES', 'BAGS'];
  
  const salesData: { date: string; region: string; channel: string; category: string; sku: string; revenue: number; quantity: number; roas: number; spend: number; is_event: boolean }[] = [];
  const weatherData: { date: string; region: string; tavg: number; tmin: number; tmax: number; humidity: number; precipitation: number }[] = [];
  const adsData: { date: string; channel: string; campaign: string; impressions: number; clicks: number; spend: number; revenue: number; roas: number; ctr: number; cpc: number }[] = [];
  
  // Îß§Ï∂ú Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
  for (const region of regions) {
    for (const channel of channels) {
      for (const category of categories) {
        const seasonal = 1 + (new Date(date).getMonth() === 5 || new Date(date).getMonth() === 10 ? 0.4 : 0);
        const event = new Date(date).getDate() === 1 || new Date(date).getDate() === 15 ? 1 : 0;
        const revenue = Math.round(500000 + 4500000 * seasonal * (0.7 + random()));
        const quantity = Math.round(revenue / 50000);
        const roas = +(2.0 + (random() - 0.5) * 0.6).toFixed(2);
        const spend = Math.round(revenue / roas);
        
        salesData.push({
          date,
          region,
          channel,
          category,
          sku: `${category}-${String(Math.floor(random() * 100)).padStart(3, '0')}`,
          revenue,
          quantity,
          roas,
          spend,
          is_event: !!event
        });
      }
    }
  }
  
  // ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
  for (const region of regions) {
    const dayOfYear = Math.floor((new Date(date).getTime() - new Date(new Date(date).getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));
    const baseTemp = 15;
    const tempSeasonal = 10 * Math.sin((dayOfYear - 80) * 2 * Math.PI / 365);
    const daily = 5 * Math.sin(dayOfYear * 0.1);
    const randomTemp = (random() - 0.5) * 8;
    const tavg = +(baseTemp + tempSeasonal + daily + randomTemp).toFixed(1);
    
    weatherData.push({
      date,
      region,
      tavg,
      tmin: +(tavg - 5).toFixed(1),
      tmax: +(tavg + 5).toFixed(1),
      humidity: Math.round(60 + random() * 30),
      precipitation: +(random() * 20).toFixed(2)
    });
  }
  
  // Í¥ëÍ≥† Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
  for (const channel of channels) {
    const campaigns = ['AlwaysOn', 'PromoPush', 'Seasonal', 'Brand'];
    for (const campaign of campaigns) {
      const impressions = Math.round(10000 + random() * 50000);
      const clicks = Math.round(impressions * (0.01 + random() * 0.02));
      const spend = Math.round(10000 + random() * 100000);
      const revenue = Math.round(spend * (1.5 + random() * 1.0));
      const roas = +(revenue / spend).toFixed(2);
      
      adsData.push({
        date,
        channel,
        campaign,
        impressions,
        clicks,
        spend,
        revenue,
        roas,
        ctr: +(clicks / impressions * 100).toFixed(2),
        cpc: +(spend / clicks).toFixed(2)
      });
    }
  }
  
  return { salesData, weatherData, adsData };
}

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
async function saveToDatabase(data: any, tableName: string) {
  try {
    let conflictColumns = '';
    
    // ÌÖåÏù¥Î∏îÎ≥Ñ Ï∂©Îèå Ïª¨Îüº ÏÑ§Ï†ï
    switch (tableName) {
      case 'weather_data':
        conflictColumns = 'date,region';
        break;
      case 'ads_data':
        conflictColumns = 'date,channel,campaign_id';
        break;
      case 'sales_data':
        conflictColumns = 'date,region,channel,category,sku';
        break;
      default:
        conflictColumns = 'id';
    }
    
    const { error } = await supabase
      .from(tableName)
      .upsert(data, { 
        onConflict: conflictColumns,
        ignoreDuplicates: false 
      });
    
    if (error) {
      console.error(`Error saving to ${tableName}:`, error);
      throw error;
    }
    
    console.log(`‚úÖ Saved ${data.length} records to ${tableName}`);
    return data.length;
  } catch (error) {
    console.error(`Failed to save to ${tableName}:`, error);
    throw error;
  }
}

// ÌÅ¨Î°† ÏûëÏóÖ Î°úÍ∑∏ Ï†ÄÏû• (ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏúºÎ©¥ ÏΩòÏÜîÏóêÎßå Ï∂úÎ†•)
async function logCronJob(jobName: string, status: string, startedAt: Date, completedAt?: Date, recordsProcessed = 0, errorMessage?: string) {
  try {
    // Î°úÍ∑∏ ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏùÑ Ïàò ÏûàÏúºÎØÄÎ°ú ÏΩòÏÜîÏóêÎßå Ï∂úÎ†•
    console.log(`üìù Cron Job Log: ${jobName} - ${status} - Records: ${recordsProcessed}`);
    if (errorMessage) {
      console.log(`‚ùå Error: ${errorMessage}`);
    }
    
    // Ìñ•ÌõÑ Î°úÍ∑∏ ÌÖåÏù¥Î∏îÏù¥ ÏÉùÏÑ±ÎêòÎ©¥ ÏïÑÎûò ÏΩîÎìú ÌôúÏÑ±Ìôî
    // const { error } = await supabase
    //   .from('cron_job_logs')
    //   .insert({
    //     job_name: jobName,
    //     status,
    //     started_at: startedAt.toISOString(),
    //     completed_at: completedAt?.toISOString(),
    //     records_processed: recordsProcessed,
    //     error_message: errorMessage
    //   });
    
    // if (error) {
    //   console.error('Error logging cron job:', error);
    // }
  } catch (error) {
    console.error('Failed to log cron job:', error);
  }
}

// Î©îÏù∏ ÌÅ¨Î°† ÏûëÏóÖ Ìï®Ïàò
export async function runCafe24Ingest() {
  const jobName = 'cafe24-ingest';
  const startedAt = new Date();
  let totalRecords = 0;
  
  try {
    console.log(`üöÄ Starting ${jobName} at ${startedAt.toISOString()}`);
    
    // Ïñ¥Ï†ú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë (Ïã§Ï†ú Ïö¥ÏòÅÏóêÏÑúÎäî Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞)
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const dateStr = yesterday.toISOString().split('T')[0];
    
    console.log(`üìä Fetching data for ${dateStr}`);
    
    // Í∏∞ÏÉÅÏ≤≠ Îç∞Ïù¥ÌÑ∞Îßå Ïã§Ï†ú API Ìò∏Ï∂úÌïòÏó¨ DBÏóê Ï†ÄÏû•
    console.log('üå§Ô∏è Fetching weather data from KMA API...');
    const weatherData = await fetchWeatherData(dateStr);
    
    // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•
    console.log('üíæ Saving weather data to database...');
    
    const weatherCount = await saveToDatabase([weatherData], 'weather_data');
    
    totalRecords = weatherCount;
    
    const completedAt = new Date();
    const duration = completedAt.getTime() - startedAt.getTime();
    
    console.log(`‚úÖ ${jobName} completed successfully!`);
    console.log(`üìà Processed ${totalRecords} weather records in ${duration}ms`);
    console.log(`   - Weather: ${weatherCount} records (from KMA API and Mock data)`);
    console.log(`   - Ads/Sales: Will use mock data in web-admin`);
    
    // ÏÑ±Í≥µ Î°úÍ∑∏ Ï†ÄÏû•
    await logCronJob(jobName, 'success', startedAt, completedAt, totalRecords);
    
  } catch (error) {
    const completedAt = new Date();
    const errorMessage = error instanceof Error ? error.message : String(error);
    
    console.error(`‚ùå ${jobName} failed:`, errorMessage);
    
    // Ïã§Ìå® Î°úÍ∑∏ Ï†ÄÏû•
    await logCronJob(jobName, 'failed', startedAt, completedAt, totalRecords, errorMessage);
    
    throw error;
  }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏Î°ú ÏßÅÏ†ë Ïã§ÌñâÌï† Îïå
if (import.meta.url === `file://${process.argv[1]}`) {
  runCafe24Ingest()
    .then(() => {
      console.log('Cron job completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Cron job failed:', error);
      process.exit(1);
    });
}
